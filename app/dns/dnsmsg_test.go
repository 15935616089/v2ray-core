// +build !confonly

package dns

import (
	"math/rand"
	"reflect"
	"testing"
	"time"

	"golang.org/x/net/dns/dnsmessage"
	net "v2ray.com/core/common/net"
	v2net "v2ray.com/core/common/net"
)

func Test_parseResponse(t *testing.T) {
	type args struct {
		req     *dnsRequest
		payload []byte
	}
	tests := []struct {
		name    string
		args    args
		want    *IPRecord
		wantErr bool
	}{
		// TODO: Add test cases.
		{"empty", args{
			&dnsRequest{dnsmessage.TypeA, "empty", time.Time{}, nil},
			[]byte{}},
			nil,
			true,
		},
		{"ibm.com", args{
			&dnsRequest{dnsmessage.TypeA, "ibm.com", time.Time{}, nil},
			[]byte{0x0, 0x1, 0x81, 0x80, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x3, 0x69, 0x62, 0x6d, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x7, 0x0, 0x0, 0x4, 0x81, 0x2a, 0x26, 0xa, 0x0, 0x0, 0x29, 0x5, 0xac, 0x0, 0x0, 0x80, 0x0, 0x0, 0x4c, 0x0, 0xc, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}},
			&IPRecord{[]v2net.Address{v2net.ParseAddress("129.42.38.10")}, time.Time{}, dnsmessage.RCodeSuccess},
			false,
		},
		{"cloudflare.com", args{
			&dnsRequest{dnsmessage.TypeAAAA, "cloudflare.com", time.Time{}, nil},
			[]byte{0x0, 0x2, 0x81, 0xa0, 0x0, 0x1, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xa, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x1c, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x1c, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe, 0x0, 0x10, 0x26, 0x6, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x11, 0xaf, 0x55, 0xc0, 0xc, 0x0, 0x1c, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe, 0x0, 0x10, 0x26, 0x6, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x11, 0xb0, 0x55, 0xc0, 0xc, 0x0, 0x2e, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe, 0x0, 0x62, 0x0, 0x1c, 0xd, 0x2, 0x0, 0x0, 0x1, 0x2c, 0x5d, 0xcf, 0xa8, 0x4a, 0x5d, 0xcc, 0xe9, 0x2a, 0x86, 0xc9, 0xa, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x96, 0x71, 0x23, 0xe0, 0x67, 0xe0, 0x94, 0xa3, 0x43, 0xa1, 0x91, 0x7f, 0xa9, 0x27, 0xf7, 0x9f, 0xa3, 0xce, 0xe2, 0x28, 0x66, 0xc1, 0xa0, 0x5b, 0x74, 0x73, 0x85, 0x65, 0xb7, 0x92, 0xad, 0x51, 0x55, 0x49, 0xfe, 0x36, 0x33, 0xb1, 0xf, 0x46, 0x1d, 0xfb, 0xb9, 0x1d, 0xc3, 0xc8, 0xf3, 0xf2, 0xc5, 0x62, 0xed, 0xee, 0xce, 0xc4, 0xb0, 0x53, 0x2a, 0xa3, 0xfa, 0x7d, 0xe9, 0xd4, 0xa9, 0xbe, 0x0, 0x0, 0x29, 0x5, 0xac, 0x0, 0x0, 0x80, 0x0, 0x0, 0x2f, 0x0, 0xc, 0x0, 0x2b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		}, &IPRecord{
			[]v2net.Address{
				v2net.ParseAddress("2606:4700::6811:af55"),
				v2net.ParseAddress("2606:4700::6811:b055"),
			}, time.Time{}, dnsmessage.RCodeSuccess},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := parseResponse(tt.args.req, tt.args.payload)
			if (err != nil) != tt.wantErr {
				t.Errorf("handleResponse() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if got != nil {
				got.Expire = time.Time{} // ignore the expire
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("handleResponse() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_buildReqMsgs(t *testing.T) {

	stubID := func() uint16 {
		return uint16(rand.Uint32())
	}
	type args struct {
		domain  string
		option  IPOption
		reqOpts *dnsmessage.Resource
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{"1", args{"test.com", IPOption{true, true}, nil}, 2},
		{"2", args{"test.com", IPOption{true, false}, nil}, 1},
		{"3", args{"test.com", IPOption{false, true}, nil}, 1},
		{"4", args{"test.com", IPOption{false, false}, nil}, 0},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := buildReqMsgs(tt.args.domain, tt.args.option, stubID, tt.args.reqOpts); !(len(got) == tt.want) {
				t.Errorf("buildReqMsgs() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_genEDNS0Options(t *testing.T) {
	type args struct {
		clientIP net.IP
	}
	tests := []struct {
		name string
		args args
		want *dnsmessage.Resource
	}{
		// TODO: Add test cases.
		{"1", args{net.ParseIP("4.3.2.1")}, nil},
		{"2", args{net.ParseIP("2001::4321")}, nil},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := genEDNS0Options(tt.args.clientIP); got == nil {
				t.Errorf("genEDNS0Options() = %v, want %v", got, tt.want)
			}
		})
	}
}
